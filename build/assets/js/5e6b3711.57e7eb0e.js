"use strict";(self.webpackChunkgb_studio_xv_plugins_docs=self.webpackChunkgb_studio_xv_plugins_docs||[]).push([[85],{9349:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>o,contentTitle:()=>n,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=i(4848),t=i(8453);const s={sidebar_position:3},n="Array Manager (Get Value)",l={id:"gbs_plugins/docs/array_manager_get",title:"Array Manager (Get Value)",description:"Obtains a value from the array index of a Virtual Global Variable that was set with the Array Manager (Set Value) plugin.",source:"@site/docs/gbs_plugins/docs/array_manager_get.md",sourceDirName:"gbs_plugins/docs",slug:"/gbs_plugins/docs/array_manager_get",permalink:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_get",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"gbsPluginsSidebar",previous:{title:"Array Manager (Set Value)",permalink:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set"},next:{title:"Actor Walkability Checker",permalink:"/tomo666/gamedevlab/gbs_plugins/docs/actor_walkability_checker"}},o={},d=[{value:"Description",id:"description",level:2},{value:"<code>Setup Array Tab</code>",id:"setup-array-tab",level:3},{value:"<em>Global Variables 1 - 16</em>",id:"global-variables-1---16",level:3},{value:"<em>Number of Global Variables to Use</em>",id:"number-of-global-variables-to-use",level:3},{value:"<em>Individual Array Element Bit Size</em>",id:"individual-array-element-bit-size",level:3},{value:"<code>Get Value Tab</code>",id:"get-value-tab",level:3},{value:"<em>Array Index</em>",id:"array-index",level:3},{value:"<em>Get Value Storage Variable</em>",id:"get-value-storage-variable",level:3},{value:"(GB Studio v4.0.x) Notes when using the plugins inside custome events.",id:"gb-studio-v40x-notes-when-using-the-plugins-inside-custome-events",level:3}];function u(e){const a={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"array-manager-get-value",children:"Array Manager (Get Value)"})}),"\n",(0,r.jsxs)(a.p,{children:["Obtains a value from the array index of a Virtual Global Variable that was set with the ",(0,r.jsx)(a.a,{href:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set",children:"Array Manager (Set Value)"})," plugin."]}),"\n",(0,r.jsx)(a.h2,{id:"description",children:"Description"}),"\n",(0,r.jsxs)(a.p,{children:["See details in ",(0,r.jsx)(a.a,{href:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set#description",children:"Array Manager (Set Value) Description"})," for basic info on the Virtual Global Variable concept."]}),"\n",(0,r.jsx)(a.h3,{id:"setup-array-tab",children:(0,r.jsx)(a.code,{children:"Setup Array Tab"})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Array Manger Get Setup Array",src:i(6928).A+"",width:"456",height:"610"})}),"\n",(0,r.jsx)(a.h3,{id:"global-variables-1---16",children:(0,r.jsx)(a.em,{children:"Global Variables 1 - 16"})}),"\n",(0,r.jsxs)(a.p,{children:["Specify the global variables that you want to merge. This should be same as the global variables set in the ",(0,r.jsx)(a.a,{href:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set",children:"Array Manager (Set Value)"})," plugin."]}),"\n",(0,r.jsx)(a.h3,{id:"number-of-global-variables-to-use",children:(0,r.jsx)(a.em,{children:"Number of Global Variables to Use"})}),"\n",(0,r.jsxs)(a.p,{children:["From the global variables set, specify the number of global variables to be merged (counting from top). Typically, you want to set the same value specified in the ",(0,r.jsx)(a.a,{href:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set",children:"Array Manager (Set Value)"})," plugin."]}),"\n",(0,r.jsx)(a.h3,{id:"individual-array-element-bit-size",children:(0,r.jsx)(a.em,{children:"Individual Array Element Bit Size"})}),"\n",(0,r.jsxs)(a.p,{children:["Specify how many bits you like to divide each global variable with. Typically, you want to set the same value specified in the ",(0,r.jsx)(a.a,{href:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set",children:"Array Manager (Set Value)"})," plugin."]}),"\n",(0,r.jsx)(a.h3,{id:"get-value-tab",children:(0,r.jsx)(a.code,{children:"Get Value Tab"})}),"\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Array Manger Get Value",src:i(2166).A+"",width:"473",height:"123"})}),"\n",(0,r.jsx)(a.h3,{id:"array-index",children:(0,r.jsx)(a.em,{children:"Array Index"})}),"\n",(0,r.jsxs)(a.p,{children:["Specify the index in the Virtual Global Variable to be manipulated on. For more info, refer to the description of the ",(0,r.jsx)(a.a,{href:"/tomo666/gamedevlab/gbs_plugins/docs/array_manager_set#array-index",children:"Array Manager (Set Value)"})," plugin."]}),"\n",(0,r.jsx)(a.h3,{id:"get-value-storage-variable",children:(0,r.jsx)(a.em,{children:"Get Value Storage Variable"})}),"\n",(0,r.jsx)(a.p,{children:"The variable to store the obtained value."}),"\n",(0,r.jsxs)(a.admonition,{type:"caution",children:[(0,r.jsx)(a.h3,{id:"gb-studio-v40x-notes-when-using-the-plugins-inside-custome-events",children:"(GB Studio v4.0.x) Notes when using the plugins inside custome events."}),(0,r.jsx)(a.p,{children:"GBS 4.0.1, 4.0.2 seems to have an issue of storing values into variables that are passed By Ref. When a variable is set as By Ref and assigned a value via a plugin, the value is not actually assigned at all and sets to 0. When you assign a value directly to the referenced variable using only custom event scripts, this issue does not happen. So, the current workaround is to add an extra variable assignment script inside the custom event script before assigning to the By Ref var."}),(0,r.jsx)(a.p,{children:(0,r.jsx)(a.img,{alt:"Notes on var ref inside custome events",src:i(3807).A+"",width:"937",height:"730"})})]})]})}function c(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},6928:(e,a,i)=>{i.d(a,{A:()=>r});const r=i.p+"assets/images/array_manager_get_setup_array-4d1fc814a1e43e319a02a27f26488693.png"},2166:(e,a,i)=>{i.d(a,{A:()=>r});const r=i.p+"assets/images/array_manager_get_value-921d949b318ac9b957ca550f758cc927.png"},3807:(e,a,i)=>{i.d(a,{A:()=>r});const r=i.p+"assets/images/var_ref_notes_using_inside_custom_events-05635b8a5e69a6a05a65fbcfdc9a78e9.png"},8453:(e,a,i)=>{i.d(a,{R:()=>n,x:()=>l});var r=i(6540);const t={},s=r.createContext(t);function n(e){const a=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:n(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);