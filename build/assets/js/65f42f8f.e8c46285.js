"use strict";(self.webpackChunkgb_studio_xv_plugins_docs=self.webpackChunkgb_studio_xv_plugins_docs||[]).push([[132],{7950:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var s=i(4848),n=i(8453);const o={sidebar_position:5},r="Obstacle Checker",c={id:"gbs_plugins/docs/obstacle_checker",title:"Obstacle Checker",description:"Obtains an obstacle info at the specified tile position.",source:"@site/docs/gbs_plugins/docs/obstacle_checker.md",sourceDirName:"gbs_plugins/docs",slug:"/gbs_plugins/docs/obstacle_checker",permalink:"/tomo666/gamedevlab/gbs_plugins/docs/obstacle_checker",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"gbsPluginsSidebar",previous:{title:"Actor Walkability Checker",permalink:"/tomo666/gamedevlab/gbs_plugins/docs/actor_walkability_checker"},next:{title:"Sprite Tile Replacer",permalink:"/tomo666/gamedevlab/gbs_plugins/docs/sprite_tile_replacer"}},a={},l=[{value:"Description",id:"description",level:2}];function d(e){const t={admonition:"admonition",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"obstacle-checker",children:"Obstacle Checker"})}),"\n",(0,s.jsx)(t.p,{children:"Obtains an obstacle info at the specified tile position."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"This plugin only supports 8x8 tile size mode."})}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"Given the tile position (X,Y), checks if there are any obstacles (map collisions or actors) on that tile. If there are no map collisions or other actors on the tile, 0 will be assigned to the specified return variable. Otherwise, this plugin will return the obstacle ID information. Example: No obstacle = 0, Obstacle found = Map Collision ID, or the actor ID represented with a negative value (Note that if the obstacle was a Player actor, the returned ID will be -128). If a map collision ID is found, the actor/player ID will be ignored."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Array Manger Set Setup Array",src:i(8867).A+"",width:"949",height:"369"})})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8867:(e,t,i)=>{i.d(t,{A:()=>s});const s=i.p+"assets/images/obstacle_checker_description-1044f202aa22297d0965b32a95c35e10.png"},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>c});var s=i(6540);const n={},o=s.createContext(n);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);